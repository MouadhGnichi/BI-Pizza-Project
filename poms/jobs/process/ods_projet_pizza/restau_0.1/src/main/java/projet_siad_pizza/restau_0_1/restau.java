// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_siad_pizza.restau_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: restau Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class restau implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "restau";
	private final String projectName = "PROJET_SIAD_PIZZA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					restau.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(restau.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_restau = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String dateAdded;

		public String getDateAdded() {
			return this.dateAdded;
		}

		public String dateUpdated;

		public String getDateUpdated() {
			return this.dateUpdated;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String categories;

		public String getCategories() {
			return this.categories;
		}

		public String primaryCategories;

		public String getPrimaryCategories() {
			return this.primaryCategories;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String keys;

		public String getKeys() {
			return this.keys;
		}

		public String latitude;

		public String getLatitude() {
			return this.latitude;
		}

		public String longitude;

		public String getLongitude() {
			return this.longitude;
		}

		public String menuPageURL;

		public String getMenuPageURL() {
			return this.menuPageURL;
		}

		public String menus_amountMax;

		public String getMenus_amountMax() {
			return this.menus_amountMax;
		}

		public String menus_amountMin;

		public String getMenus_amountMin() {
			return this.menus_amountMin;
		}

		public String menus_currency;

		public String getMenus_currency() {
			return this.menus_currency;
		}

		public String menus_dateSeen;

		public String getMenus_dateSeen() {
			return this.menus_dateSeen;
		}

		public String menus_description;

		public String getMenus_description() {
			return this.menus_description;
		}

		public String menus_name;

		public String getMenus_name() {
			return this.menus_name;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String priceRangeCurrency;

		public String getPriceRangeCurrency() {
			return this.priceRangeCurrency;
		}

		public String priceRangeMin;

		public String getPriceRangeMin() {
			return this.priceRangeMin;
		}

		public String priceRangeMax;

		public String getPriceRangeMax() {
			return this.priceRangeMax;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		public String Column31;

		public String getColumn31() {
			return this.Column31;
		}

		public String Column32;

		public String getColumn32() {
			return this.Column32;
		}

		public String Column33;

		public String getColumn33() {
			return this.Column33;
		}

		public String Column34;

		public String getColumn34() {
			return this.Column34;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.id = this.id;
			other.dateAdded = this.dateAdded;
			other.dateUpdated = this.dateUpdated;
			other.address = this.address;
			other.categories = this.categories;
			other.primaryCategories = this.primaryCategories;
			other.city = this.city;
			other.country = this.country;
			other.keys = this.keys;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.menuPageURL = this.menuPageURL;
			other.menus_amountMax = this.menus_amountMax;
			other.menus_amountMin = this.menus_amountMin;
			other.menus_currency = this.menus_currency;
			other.menus_dateSeen = this.menus_dateSeen;
			other.menus_description = this.menus_description;
			other.menus_name = this.menus_name;
			other.name = this.name;
			other.postalCode = this.postalCode;
			other.priceRangeCurrency = this.priceRangeCurrency;
			other.priceRangeMin = this.priceRangeMin;
			other.priceRangeMax = this.priceRangeMax;
			other.province = this.province;
			other.Column24 = this.Column24;
			other.Column25 = this.Column25;
			other.Column26 = this.Column26;
			other.Column27 = this.Column27;
			other.Column28 = this.Column28;
			other.Column29 = this.Column29;
			other.Column30 = this.Column30;
			other.Column31 = this.Column31;
			other.Column32 = this.Column32;
			other.Column33 = this.Column33;
			other.Column34 = this.Column34;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_restau.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_restau.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_restau, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_restau, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_restau) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.dateAdded = readString(dis);

					this.dateUpdated = readString(dis);

					this.address = readString(dis);

					this.categories = readString(dis);

					this.primaryCategories = readString(dis);

					this.city = readString(dis);

					this.country = readString(dis);

					this.keys = readString(dis);

					this.latitude = readString(dis);

					this.longitude = readString(dis);

					this.menuPageURL = readString(dis);

					this.menus_amountMax = readString(dis);

					this.menus_amountMin = readString(dis);

					this.menus_currency = readString(dis);

					this.menus_dateSeen = readString(dis);

					this.menus_description = readString(dis);

					this.menus_name = readString(dis);

					this.name = readString(dis);

					this.postalCode = readString(dis);

					this.priceRangeCurrency = readString(dis);

					this.priceRangeMin = readString(dis);

					this.priceRangeMax = readString(dis);

					this.province = readString(dis);

					this.Column24 = readString(dis);

					this.Column25 = readString(dis);

					this.Column26 = readString(dis);

					this.Column27 = readString(dis);

					this.Column28 = readString(dis);

					this.Column29 = readString(dis);

					this.Column30 = readString(dis);

					this.Column31 = readString(dis);

					this.Column32 = readString(dis);

					this.Column33 = readString(dis);

					this.Column34 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.dateAdded, dos);

				// String

				writeString(this.dateUpdated, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.categories, dos);

				// String

				writeString(this.primaryCategories, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.keys, dos);

				// String

				writeString(this.latitude, dos);

				// String

				writeString(this.longitude, dos);

				// String

				writeString(this.menuPageURL, dos);

				// String

				writeString(this.menus_amountMax, dos);

				// String

				writeString(this.menus_amountMin, dos);

				// String

				writeString(this.menus_currency, dos);

				// String

				writeString(this.menus_dateSeen, dos);

				// String

				writeString(this.menus_description, dos);

				// String

				writeString(this.menus_name, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.priceRangeCurrency, dos);

				// String

				writeString(this.priceRangeMin, dos);

				// String

				writeString(this.priceRangeMax, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.Column24, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Column26, dos);

				// String

				writeString(this.Column27, dos);

				// String

				writeString(this.Column28, dos);

				// String

				writeString(this.Column29, dos);

				// String

				writeString(this.Column30, dos);

				// String

				writeString(this.Column31, dos);

				// String

				writeString(this.Column32, dos);

				// String

				writeString(this.Column33, dos);

				// String

				writeString(this.Column34, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",dateAdded=" + dateAdded);
			sb.append(",dateUpdated=" + dateUpdated);
			sb.append(",address=" + address);
			sb.append(",categories=" + categories);
			sb.append(",primaryCategories=" + primaryCategories);
			sb.append(",city=" + city);
			sb.append(",country=" + country);
			sb.append(",keys=" + keys);
			sb.append(",latitude=" + latitude);
			sb.append(",longitude=" + longitude);
			sb.append(",menuPageURL=" + menuPageURL);
			sb.append(",menus_amountMax=" + menus_amountMax);
			sb.append(",menus_amountMin=" + menus_amountMin);
			sb.append(",menus_currency=" + menus_currency);
			sb.append(",menus_dateSeen=" + menus_dateSeen);
			sb.append(",menus_description=" + menus_description);
			sb.append(",menus_name=" + menus_name);
			sb.append(",name=" + name);
			sb.append(",postalCode=" + postalCode);
			sb.append(",priceRangeCurrency=" + priceRangeCurrency);
			sb.append(",priceRangeMin=" + priceRangeMin);
			sb.append(",priceRangeMax=" + priceRangeMax);
			sb.append(",province=" + province);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append(",Column31=" + Column31);
			sb.append(",Column32=" + Column32);
			sb.append(",Column33=" + Column33);
			sb.append(",Column34=" + Column34);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_restau = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String dateAdded;

		public String getDateAdded() {
			return this.dateAdded;
		}

		public String dateUpdated;

		public String getDateUpdated() {
			return this.dateUpdated;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String categories;

		public String getCategories() {
			return this.categories;
		}

		public String primaryCategories;

		public String getPrimaryCategories() {
			return this.primaryCategories;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String keys;

		public String getKeys() {
			return this.keys;
		}

		public String latitude;

		public String getLatitude() {
			return this.latitude;
		}

		public String longitude;

		public String getLongitude() {
			return this.longitude;
		}

		public String menuPageURL;

		public String getMenuPageURL() {
			return this.menuPageURL;
		}

		public String menus_amountMax;

		public String getMenus_amountMax() {
			return this.menus_amountMax;
		}

		public String menus_amountMin;

		public String getMenus_amountMin() {
			return this.menus_amountMin;
		}

		public String menus_currency;

		public String getMenus_currency() {
			return this.menus_currency;
		}

		public String menus_dateSeen;

		public String getMenus_dateSeen() {
			return this.menus_dateSeen;
		}

		public String menus_description;

		public String getMenus_description() {
			return this.menus_description;
		}

		public String menus_name;

		public String getMenus_name() {
			return this.menus_name;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String priceRangeCurrency;

		public String getPriceRangeCurrency() {
			return this.priceRangeCurrency;
		}

		public String priceRangeMin;

		public String getPriceRangeMin() {
			return this.priceRangeMin;
		}

		public String priceRangeMax;

		public String getPriceRangeMax() {
			return this.priceRangeMax;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		public String Column31;

		public String getColumn31() {
			return this.Column31;
		}

		public String Column32;

		public String getColumn32() {
			return this.Column32;
		}

		public String Column33;

		public String getColumn33() {
			return this.Column33;
		}

		public String Column34;

		public String getColumn34() {
			return this.Column34;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_restau.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_restau.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_restau = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_restau, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_restau, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_restau) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.dateAdded = readString(dis);

					this.dateUpdated = readString(dis);

					this.address = readString(dis);

					this.categories = readString(dis);

					this.primaryCategories = readString(dis);

					this.city = readString(dis);

					this.country = readString(dis);

					this.keys = readString(dis);

					this.latitude = readString(dis);

					this.longitude = readString(dis);

					this.menuPageURL = readString(dis);

					this.menus_amountMax = readString(dis);

					this.menus_amountMin = readString(dis);

					this.menus_currency = readString(dis);

					this.menus_dateSeen = readString(dis);

					this.menus_description = readString(dis);

					this.menus_name = readString(dis);

					this.name = readString(dis);

					this.postalCode = readString(dis);

					this.priceRangeCurrency = readString(dis);

					this.priceRangeMin = readString(dis);

					this.priceRangeMax = readString(dis);

					this.province = readString(dis);

					this.Column24 = readString(dis);

					this.Column25 = readString(dis);

					this.Column26 = readString(dis);

					this.Column27 = readString(dis);

					this.Column28 = readString(dis);

					this.Column29 = readString(dis);

					this.Column30 = readString(dis);

					this.Column31 = readString(dis);

					this.Column32 = readString(dis);

					this.Column33 = readString(dis);

					this.Column34 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.dateAdded, dos);

				// String

				writeString(this.dateUpdated, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.categories, dos);

				// String

				writeString(this.primaryCategories, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.keys, dos);

				// String

				writeString(this.latitude, dos);

				// String

				writeString(this.longitude, dos);

				// String

				writeString(this.menuPageURL, dos);

				// String

				writeString(this.menus_amountMax, dos);

				// String

				writeString(this.menus_amountMin, dos);

				// String

				writeString(this.menus_currency, dos);

				// String

				writeString(this.menus_dateSeen, dos);

				// String

				writeString(this.menus_description, dos);

				// String

				writeString(this.menus_name, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.priceRangeCurrency, dos);

				// String

				writeString(this.priceRangeMin, dos);

				// String

				writeString(this.priceRangeMax, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.Column24, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Column26, dos);

				// String

				writeString(this.Column27, dos);

				// String

				writeString(this.Column28, dos);

				// String

				writeString(this.Column29, dos);

				// String

				writeString(this.Column30, dos);

				// String

				writeString(this.Column31, dos);

				// String

				writeString(this.Column32, dos);

				// String

				writeString(this.Column33, dos);

				// String

				writeString(this.Column34, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",dateAdded=" + dateAdded);
			sb.append(",dateUpdated=" + dateUpdated);
			sb.append(",address=" + address);
			sb.append(",categories=" + categories);
			sb.append(",primaryCategories=" + primaryCategories);
			sb.append(",city=" + city);
			sb.append(",country=" + country);
			sb.append(",keys=" + keys);
			sb.append(",latitude=" + latitude);
			sb.append(",longitude=" + longitude);
			sb.append(",menuPageURL=" + menuPageURL);
			sb.append(",menus_amountMax=" + menus_amountMax);
			sb.append(",menus_amountMin=" + menus_amountMin);
			sb.append(",menus_currency=" + menus_currency);
			sb.append(",menus_dateSeen=" + menus_dateSeen);
			sb.append(",menus_description=" + menus_description);
			sb.append(",menus_name=" + menus_name);
			sb.append(",name=" + name);
			sb.append(",postalCode=" + postalCode);
			sb.append(",priceRangeCurrency=" + priceRangeCurrency);
			sb.append(",priceRangeMin=" + priceRangeMin);
			sb.append(",priceRangeMax=" + priceRangeMax);
			sb.append(",province=" + province);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append(",Column31=" + Column31);
			sb.append(",Column32=" + Column32);
			sb.append(",Column33=" + Column33);
			sb.append(",Column34=" + Column34);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "resto";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "ods_projet_pizza" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "ods_projet_pizza" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:qCUTGxxHv5y5k3y8JYgIDlfAYOf0WsWrEcOnrg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("ods_projet_pizza", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("resto")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
								+ "`(`id` VARCHAR(20)   not null ,`dateAdded` VARCHAR(10)  ,`dateUpdated` VARCHAR(8)  ,`address` VARCHAR(22)  ,`categories` VARCHAR(18)  ,`primaryCategories` VARCHAR(29)  ,`city` VARCHAR(29)  ,`country` VARCHAR(35)  ,`keys` VARCHAR(47)  ,`latitude` VARCHAR(45)  ,`longitude` VARCHAR(42)  ,`menuPageURL` VARCHAR(44)  ,`menus_amountMax` VARCHAR(42)  ,`menus_amountMin` VARCHAR(90)  ,`menus_currency` VARCHAR(10)  ,`menus_dateSeen` VARCHAR(82)  ,`menus_description` VARCHAR(25)  ,`menus_name` VARCHAR(25)  ,`name` VARCHAR(59)  ,`postalCode` VARCHAR(26)  ,`priceRangeCurrency` VARCHAR(112)  ,`priceRangeMin` VARCHAR(25)  ,`priceRangeMax` VARCHAR(43)  ,`province` VARCHAR(38)  ,`Column24` VARCHAR(62)  ,`Column25` VARCHAR(101)  ,`Column26` VARCHAR(31)  ,`Column27` VARCHAR(23)  ,`Column28` VARCHAR(15)  ,`Column29` VARCHAR(11)  ,`Column30` VARCHAR(5)  ,`Column31` VARCHAR(3)  ,`Column32` VARCHAR(2)  ,`Column33` VARCHAR(2)  ,`Column34` VARCHAR(2)  ,primary key(`id`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "resto" + "` WHERE `id` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "resto"
						+ "` (`id`,`dateAdded`,`dateUpdated`,`address`,`categories`,`primaryCategories`,`city`,`country`,`keys`,`latitude`,`longitude`,`menuPageURL`,`menus_amountMax`,`menus_amountMin`,`menus_currency`,`menus_dateSeen`,`menus_description`,`menus_name`,`name`,`postalCode`,`priceRangeCurrency`,`priceRangeMin`,`priceRangeMax`,`province`,`Column24`,`Column25`,`Column26`,`Column27`,`Column28`,`Column29`,`Column30`,`Column31`,`Column32`,`Column33`,`Column34`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "resto"
						+ "` SET `dateAdded` = ?,`dateUpdated` = ?,`address` = ?,`categories` = ?,`primaryCategories` = ?,`city` = ?,`country` = ?,`keys` = ?,`latitude` = ?,`longitude` = ?,`menuPageURL` = ?,`menus_amountMax` = ?,`menus_amountMin` = ?,`menus_currency` = ?,`menus_dateSeen` = ?,`menus_description` = ?,`menus_name` = ?,`name` = ?,`postalCode` = ?,`priceRangeCurrency` = ?,`priceRangeMin` = ?,`priceRangeMax` = ?,`province` = ?,`Column24` = ?,`Column25` = ?,`Column26` = ?,`Column27` = ?,`Column28` = ?,`Column29` = ?,`Column30` = ?,`Column31` = ?,`Column32` = ?,`Column33` = ?,`Column34` = ? WHERE `id` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/muath/Desktop/pizza/restau.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/muath/Desktop/pizza/restau.csv", "UTF-8", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.id = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.dateAdded = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.dateUpdated = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.address = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.categories = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.primaryCategories = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.city = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.country = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.keys = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.latitude = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.longitude = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.menuPageURL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.menus_amountMax = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.menus_amountMin = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.menus_currency = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.menus_dateSeen = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.menus_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.menus_name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.postalCode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.priceRangeCurrency = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.priceRangeMin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.priceRangeMax = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.province = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.Column24 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.Column25 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.Column26 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.Column27 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.Column28 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.Column29 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.Column30 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.Column31 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.Column32 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.Column33 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.Column34 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.id = row1.id;
								out1_tmp.dateAdded = row1.dateAdded;
								out1_tmp.dateUpdated = row1.dateUpdated;
								out1_tmp.address = row1.address;
								out1_tmp.categories = row1.categories;
								out1_tmp.primaryCategories = row1.primaryCategories;
								out1_tmp.city = row1.city;
								out1_tmp.country = row1.country;
								out1_tmp.keys = row1.keys;
								out1_tmp.latitude = row1.latitude;
								out1_tmp.longitude = row1.longitude;
								out1_tmp.menuPageURL = row1.menuPageURL;
								out1_tmp.menus_amountMax = row1.menus_amountMax;
								out1_tmp.menus_amountMin = row1.menus_amountMin;
								out1_tmp.menus_currency = row1.menus_currency;
								out1_tmp.menus_dateSeen = row1.menus_dateSeen;
								out1_tmp.menus_description = row1.menus_description;
								out1_tmp.menus_name = row1.menus_name;
								out1_tmp.name = row1.name;
								out1_tmp.postalCode = row1.postalCode;
								out1_tmp.priceRangeCurrency = row1.priceRangeCurrency;
								out1_tmp.priceRangeMin = row1.priceRangeMin;
								out1_tmp.priceRangeMax = row1.priceRangeMax;
								out1_tmp.province = row1.province;
								out1_tmp.Column24 = row1.Column24;
								out1_tmp.Column25 = row1.Column25;
								out1_tmp.Column26 = row1.Column26;
								out1_tmp.Column27 = row1.Column27;
								out1_tmp.Column28 = row1.Column28;
								out1_tmp.Column29 = row1.Column29;
								out1_tmp.Column30 = row1.Column30;
								out1_tmp.Column31 = row1.Column31;
								out1_tmp.Column32 = row1.Column32;
								out1_tmp.Column33 = row1.Column33;
								out1_tmp.Column34 = row1.Column34;
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								whetherReject_tDBOutput_1 = false;
								if (out1.id == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, out1.id);
								}

								int checkCount_tDBOutput_1 = -1;
								try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
									while (rs_tDBOutput_1.next()) {
										checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
									}
								}
								if (checkCount_tDBOutput_1 > 0) {
									if (out1.dateAdded == null) {
										pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(1, out1.dateAdded);
									}

									if (out1.dateUpdated == null) {
										pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(2, out1.dateUpdated);
									}

									if (out1.address == null) {
										pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(3, out1.address);
									}

									if (out1.categories == null) {
										pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(4, out1.categories);
									}

									if (out1.primaryCategories == null) {
										pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(5, out1.primaryCategories);
									}

									if (out1.city == null) {
										pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(6, out1.city);
									}

									if (out1.country == null) {
										pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(7, out1.country);
									}

									if (out1.keys == null) {
										pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(8, out1.keys);
									}

									if (out1.latitude == null) {
										pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(9, out1.latitude);
									}

									if (out1.longitude == null) {
										pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(10, out1.longitude);
									}

									if (out1.menuPageURL == null) {
										pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(11, out1.menuPageURL);
									}

									if (out1.menus_amountMax == null) {
										pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(12, out1.menus_amountMax);
									}

									if (out1.menus_amountMin == null) {
										pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(13, out1.menus_amountMin);
									}

									if (out1.menus_currency == null) {
										pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(14, out1.menus_currency);
									}

									if (out1.menus_dateSeen == null) {
										pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(15, out1.menus_dateSeen);
									}

									if (out1.menus_description == null) {
										pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(16, out1.menus_description);
									}

									if (out1.menus_name == null) {
										pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(17, out1.menus_name);
									}

									if (out1.name == null) {
										pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(18, out1.name);
									}

									if (out1.postalCode == null) {
										pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(19, out1.postalCode);
									}

									if (out1.priceRangeCurrency == null) {
										pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(20, out1.priceRangeCurrency);
									}

									if (out1.priceRangeMin == null) {
										pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(21, out1.priceRangeMin);
									}

									if (out1.priceRangeMax == null) {
										pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(22, out1.priceRangeMax);
									}

									if (out1.province == null) {
										pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(23, out1.province);
									}

									if (out1.Column24 == null) {
										pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(24, out1.Column24);
									}

									if (out1.Column25 == null) {
										pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(25, out1.Column25);
									}

									if (out1.Column26 == null) {
										pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(26, out1.Column26);
									}

									if (out1.Column27 == null) {
										pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(27, out1.Column27);
									}

									if (out1.Column28 == null) {
										pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(28, out1.Column28);
									}

									if (out1.Column29 == null) {
										pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(29, out1.Column29);
									}

									if (out1.Column30 == null) {
										pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(30, out1.Column30);
									}

									if (out1.Column31 == null) {
										pstmtUpdate_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(31, out1.Column31);
									}

									if (out1.Column32 == null) {
										pstmtUpdate_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(32, out1.Column32);
									}

									if (out1.Column33 == null) {
										pstmtUpdate_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(33, out1.Column33);
									}

									if (out1.Column34 == null) {
										pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(34, out1.Column34);
									}

									if (out1.id == null) {
										pstmtUpdate_tDBOutput_1.setNull(35 + count_tDBOutput_1, java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tDBOutput_1.setString(35 + count_tDBOutput_1, out1.id);
									}

									try {
										updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
												+ pstmtUpdate_tDBOutput_1.executeUpdate();
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								} else {
									if (out1.id == null) {
										pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(1, out1.id);
									}

									if (out1.dateAdded == null) {
										pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(2, out1.dateAdded);
									}

									if (out1.dateUpdated == null) {
										pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(3, out1.dateUpdated);
									}

									if (out1.address == null) {
										pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(4, out1.address);
									}

									if (out1.categories == null) {
										pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(5, out1.categories);
									}

									if (out1.primaryCategories == null) {
										pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(6, out1.primaryCategories);
									}

									if (out1.city == null) {
										pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(7, out1.city);
									}

									if (out1.country == null) {
										pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(8, out1.country);
									}

									if (out1.keys == null) {
										pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(9, out1.keys);
									}

									if (out1.latitude == null) {
										pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(10, out1.latitude);
									}

									if (out1.longitude == null) {
										pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(11, out1.longitude);
									}

									if (out1.menuPageURL == null) {
										pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(12, out1.menuPageURL);
									}

									if (out1.menus_amountMax == null) {
										pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(13, out1.menus_amountMax);
									}

									if (out1.menus_amountMin == null) {
										pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(14, out1.menus_amountMin);
									}

									if (out1.menus_currency == null) {
										pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(15, out1.menus_currency);
									}

									if (out1.menus_dateSeen == null) {
										pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(16, out1.menus_dateSeen);
									}

									if (out1.menus_description == null) {
										pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(17, out1.menus_description);
									}

									if (out1.menus_name == null) {
										pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(18, out1.menus_name);
									}

									if (out1.name == null) {
										pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(19, out1.name);
									}

									if (out1.postalCode == null) {
										pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(20, out1.postalCode);
									}

									if (out1.priceRangeCurrency == null) {
										pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(21, out1.priceRangeCurrency);
									}

									if (out1.priceRangeMin == null) {
										pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(22, out1.priceRangeMin);
									}

									if (out1.priceRangeMax == null) {
										pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(23, out1.priceRangeMax);
									}

									if (out1.province == null) {
										pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(24, out1.province);
									}

									if (out1.Column24 == null) {
										pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(25, out1.Column24);
									}

									if (out1.Column25 == null) {
										pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(26, out1.Column25);
									}

									if (out1.Column26 == null) {
										pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(27, out1.Column26);
									}

									if (out1.Column27 == null) {
										pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(28, out1.Column27);
									}

									if (out1.Column28 == null) {
										pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(29, out1.Column28);
									}

									if (out1.Column29 == null) {
										pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(30, out1.Column29);
									}

									if (out1.Column30 == null) {
										pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(31, out1.Column30);
									}

									if (out1.Column31 == null) {
										pstmtInsert_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(32, out1.Column31);
									}

									if (out1.Column32 == null) {
										pstmtInsert_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(33, out1.Column32);
									}

									if (out1.Column33 == null) {
										pstmtInsert_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(34, out1.Column33);
									}

									if (out1.Column34 == null) {
										pstmtInsert_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(35, out1.Column34);
									}

									try {
										insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
												+ pstmtInsert_tDBOutput_1.executeUpdate();
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;
										System.err.print(e.getMessage());
									}
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/muath/Desktop/pizza/restau.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final restau restauClass = new restau();

		int exitCode = restauClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = restau.class.getClassLoader()
					.getResourceAsStream("projet_siad_pizza/restau_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = restau.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : restau");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 92238 characters generated by Talend Open Studio for Data Integration on the
 * January 2, 2022 10:47:52 PM WAT
 ************************************************************************************************/