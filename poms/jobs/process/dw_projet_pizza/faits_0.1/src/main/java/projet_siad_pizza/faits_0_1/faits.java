// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_siad_pizza.faits_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: faits Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class faits implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "faits";
	private final String projectName = "PROJET_SIAD_PIZZA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					faits.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(faits.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int sk_faits;

		public int getSk_faits() {
			return this.sk_faits;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_1;

		public String getId_1() {
			return this.id_1;
		}

		public int sk_lieu;

		public int getSk_lieu() {
			return this.sk_lieu;
		}

		public int sk_restau;

		public int getSk_restau() {
			return this.sk_restau;
		}

		public int sk_temps;

		public int getSk_temps() {
			return this.sk_temps;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.sk_faits;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.sk_faits != other.sk_faits)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.sk_faits = this.sk_faits;
			other.id = this.id;
			other.id_1 = this.id_1;
			other.sk_lieu = this.sk_lieu;
			other.sk_restau = this.sk_restau;
			other.sk_temps = this.sk_temps;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.sk_faits = this.sk_faits;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.sk_faits = dis.readInt();

					this.id = readString(dis);

					this.id_1 = readString(dis);

					this.sk_lieu = dis.readInt();

					this.sk_restau = dis.readInt();

					this.sk_temps = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.sk_faits);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_1, dos);

				// int

				dos.writeInt(this.sk_lieu);

				// int

				dos.writeInt(this.sk_restau);

				// int

				dos.writeInt(this.sk_temps);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_faits=" + String.valueOf(sk_faits));
			sb.append(",id=" + id);
			sb.append(",id_1=" + id_1);
			sb.append(",sk_lieu=" + String.valueOf(sk_lieu));
			sb.append(",sk_restau=" + String.valueOf(sk_restau));
			sb.append(",sk_temps=" + String.valueOf(sk_temps));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.sk_faits, other.sk_faits);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String categories;

		public String getCategories() {
			return this.categories;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String keys;

		public String getKeys() {
			return this.keys;
		}

		public String latitude;

		public String getLatitude() {
			return this.latitude;
		}

		public String longitude;

		public String getLongitude() {
			return this.longitude;
		}

		public String menuPageURL;

		public String getMenuPageURL() {
			return this.menuPageURL;
		}

		public String menus_amountMax;

		public String getMenus_amountMax() {
			return this.menus_amountMax;
		}

		public String menus_amountMin;

		public String getMenus_amountMin() {
			return this.menus_amountMin;
		}

		public String menus_currency;

		public String getMenus_currency() {
			return this.menus_currency;
		}

		public String menus_dateSeen;

		public String getMenus_dateSeen() {
			return this.menus_dateSeen;
		}

		public String menus_description;

		public String getMenus_description() {
			return this.menus_description;
		}

		public String menus_name;

		public String getMenus_name() {
			return this.menus_name;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String priceRangeCurrency;

		public String getPriceRangeCurrency() {
			return this.priceRangeCurrency;
		}

		public String priceRangeMin;

		public String getPriceRangeMin() {
			return this.priceRangeMin;
		}

		public String priceRangeMax;

		public String getPriceRangeMax() {
			return this.priceRangeMax;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String Column21;

		public String getColumn21() {
			return this.Column21;
		}

		public String Column22;

		public String getColumn22() {
			return this.Column22;
		}

		public String Column23;

		public String getColumn23() {
			return this.Column23;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.address = readString(dis);

					this.categories = readString(dis);

					this.city = readString(dis);

					this.country = readString(dis);

					this.keys = readString(dis);

					this.latitude = readString(dis);

					this.longitude = readString(dis);

					this.menuPageURL = readString(dis);

					this.menus_amountMax = readString(dis);

					this.menus_amountMin = readString(dis);

					this.menus_currency = readString(dis);

					this.menus_dateSeen = readString(dis);

					this.menus_description = readString(dis);

					this.menus_name = readString(dis);

					this.name = readString(dis);

					this.postalCode = readString(dis);

					this.priceRangeCurrency = readString(dis);

					this.priceRangeMin = readString(dis);

					this.priceRangeMax = readString(dis);

					this.province = readString(dis);

					this.Column21 = readString(dis);

					this.Column22 = readString(dis);

					this.Column23 = readString(dis);

					this.Column24 = readString(dis);

					this.Column25 = readString(dis);

					this.Column26 = readString(dis);

					this.Column27 = readString(dis);

					this.Column28 = readString(dis);

					this.Column29 = readString(dis);

					this.Column30 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.categories, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.keys, dos);

				// String

				writeString(this.latitude, dos);

				// String

				writeString(this.longitude, dos);

				// String

				writeString(this.menuPageURL, dos);

				// String

				writeString(this.menus_amountMax, dos);

				// String

				writeString(this.menus_amountMin, dos);

				// String

				writeString(this.menus_currency, dos);

				// String

				writeString(this.menus_dateSeen, dos);

				// String

				writeString(this.menus_description, dos);

				// String

				writeString(this.menus_name, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.priceRangeCurrency, dos);

				// String

				writeString(this.priceRangeMin, dos);

				// String

				writeString(this.priceRangeMax, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.Column21, dos);

				// String

				writeString(this.Column22, dos);

				// String

				writeString(this.Column23, dos);

				// String

				writeString(this.Column24, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Column26, dos);

				// String

				writeString(this.Column27, dos);

				// String

				writeString(this.Column28, dos);

				// String

				writeString(this.Column29, dos);

				// String

				writeString(this.Column30, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",address=" + address);
			sb.append(",categories=" + categories);
			sb.append(",city=" + city);
			sb.append(",country=" + country);
			sb.append(",keys=" + keys);
			sb.append(",latitude=" + latitude);
			sb.append(",longitude=" + longitude);
			sb.append(",menuPageURL=" + menuPageURL);
			sb.append(",menus_amountMax=" + menus_amountMax);
			sb.append(",menus_amountMin=" + menus_amountMin);
			sb.append(",menus_currency=" + menus_currency);
			sb.append(",menus_dateSeen=" + menus_dateSeen);
			sb.append(",menus_description=" + menus_description);
			sb.append(",menus_name=" + menus_name);
			sb.append(",name=" + name);
			sb.append(",postalCode=" + postalCode);
			sb.append(",priceRangeCurrency=" + priceRangeCurrency);
			sb.append(",priceRangeMin=" + priceRangeMin);
			sb.append(",priceRangeMax=" + priceRangeMax);
			sb.append(",province=" + province);
			sb.append(",Column21=" + Column21);
			sb.append(",Column22=" + Column22);
			sb.append(",Column23=" + Column23);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String categories;

		public String getCategories() {
			return this.categories;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String keys;

		public String getKeys() {
			return this.keys;
		}

		public String latitude;

		public String getLatitude() {
			return this.latitude;
		}

		public String longitude;

		public String getLongitude() {
			return this.longitude;
		}

		public String menuPageURL;

		public String getMenuPageURL() {
			return this.menuPageURL;
		}

		public String menus_amountMax;

		public String getMenus_amountMax() {
			return this.menus_amountMax;
		}

		public String menus_amountMin;

		public String getMenus_amountMin() {
			return this.menus_amountMin;
		}

		public String menus_currency;

		public String getMenus_currency() {
			return this.menus_currency;
		}

		public String menus_dateSeen;

		public String getMenus_dateSeen() {
			return this.menus_dateSeen;
		}

		public String menus_description;

		public String getMenus_description() {
			return this.menus_description;
		}

		public String menus_name;

		public String getMenus_name() {
			return this.menus_name;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String priceRangeCurrency;

		public String getPriceRangeCurrency() {
			return this.priceRangeCurrency;
		}

		public String priceRangeMin;

		public String getPriceRangeMin() {
			return this.priceRangeMin;
		}

		public String priceRangeMax;

		public String getPriceRangeMax() {
			return this.priceRangeMax;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String Column21;

		public String getColumn21() {
			return this.Column21;
		}

		public String Column22;

		public String getColumn22() {
			return this.Column22;
		}

		public String Column23;

		public String getColumn23() {
			return this.Column23;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.id = this.id;
			other.address = this.address;
			other.categories = this.categories;
			other.city = this.city;
			other.country = this.country;
			other.keys = this.keys;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.menuPageURL = this.menuPageURL;
			other.menus_amountMax = this.menus_amountMax;
			other.menus_amountMin = this.menus_amountMin;
			other.menus_currency = this.menus_currency;
			other.menus_dateSeen = this.menus_dateSeen;
			other.menus_description = this.menus_description;
			other.menus_name = this.menus_name;
			other.name = this.name;
			other.postalCode = this.postalCode;
			other.priceRangeCurrency = this.priceRangeCurrency;
			other.priceRangeMin = this.priceRangeMin;
			other.priceRangeMax = this.priceRangeMax;
			other.province = this.province;
			other.Column21 = this.Column21;
			other.Column22 = this.Column22;
			other.Column23 = this.Column23;
			other.Column24 = this.Column24;
			other.Column25 = this.Column25;
			other.Column26 = this.Column26;
			other.Column27 = this.Column27;
			other.Column28 = this.Column28;
			other.Column29 = this.Column29;
			other.Column30 = this.Column30;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.address = readString(dis);

					this.categories = readString(dis);

					this.city = readString(dis);

					this.country = readString(dis);

					this.keys = readString(dis);

					this.latitude = readString(dis);

					this.longitude = readString(dis);

					this.menuPageURL = readString(dis);

					this.menus_amountMax = readString(dis);

					this.menus_amountMin = readString(dis);

					this.menus_currency = readString(dis);

					this.menus_dateSeen = readString(dis);

					this.menus_description = readString(dis);

					this.menus_name = readString(dis);

					this.name = readString(dis);

					this.postalCode = readString(dis);

					this.priceRangeCurrency = readString(dis);

					this.priceRangeMin = readString(dis);

					this.priceRangeMax = readString(dis);

					this.province = readString(dis);

					this.Column21 = readString(dis);

					this.Column22 = readString(dis);

					this.Column23 = readString(dis);

					this.Column24 = readString(dis);

					this.Column25 = readString(dis);

					this.Column26 = readString(dis);

					this.Column27 = readString(dis);

					this.Column28 = readString(dis);

					this.Column29 = readString(dis);

					this.Column30 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.categories, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.keys, dos);

				// String

				writeString(this.latitude, dos);

				// String

				writeString(this.longitude, dos);

				// String

				writeString(this.menuPageURL, dos);

				// String

				writeString(this.menus_amountMax, dos);

				// String

				writeString(this.menus_amountMin, dos);

				// String

				writeString(this.menus_currency, dos);

				// String

				writeString(this.menus_dateSeen, dos);

				// String

				writeString(this.menus_description, dos);

				// String

				writeString(this.menus_name, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.priceRangeCurrency, dos);

				// String

				writeString(this.priceRangeMin, dos);

				// String

				writeString(this.priceRangeMax, dos);

				// String

				writeString(this.province, dos);

				// String

				writeString(this.Column21, dos);

				// String

				writeString(this.Column22, dos);

				// String

				writeString(this.Column23, dos);

				// String

				writeString(this.Column24, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Column26, dos);

				// String

				writeString(this.Column27, dos);

				// String

				writeString(this.Column28, dos);

				// String

				writeString(this.Column29, dos);

				// String

				writeString(this.Column30, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",address=" + address);
			sb.append(",categories=" + categories);
			sb.append(",city=" + city);
			sb.append(",country=" + country);
			sb.append(",keys=" + keys);
			sb.append(",latitude=" + latitude);
			sb.append(",longitude=" + longitude);
			sb.append(",menuPageURL=" + menuPageURL);
			sb.append(",menus_amountMax=" + menus_amountMax);
			sb.append(",menus_amountMin=" + menus_amountMin);
			sb.append(",menus_currency=" + menus_currency);
			sb.append(",menus_dateSeen=" + menus_dateSeen);
			sb.append(",menus_description=" + menus_description);
			sb.append(",menus_name=" + menus_name);
			sb.append(",name=" + name);
			sb.append(",postalCode=" + postalCode);
			sb.append(",priceRangeCurrency=" + priceRangeCurrency);
			sb.append(",priceRangeMin=" + priceRangeMin);
			sb.append(",priceRangeMax=" + priceRangeMax);
			sb.append(",province=" + province);
			sb.append(",Column21=" + Column21);
			sb.append(",Column22=" + Column22);
			sb.append(",Column23=" + Column23);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "faits";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "dw_projet_pizza" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "dw_projet_pizza" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:TwERqnMWEOeoFsO0i6kgwekYvzDFFwfiG4nQMQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("dw_projet_pizza", null,
						null, new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("faits")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
								+ "`(`sk_faits` INT(20)   not null ,`id` VARCHAR(20)   not null ,`id` VARCHAR(20)   not null ,`sk_lieu` INT(10)   not null ,`sk_restau` INT(10)   not null ,`sk_temps` INT(10)   not null ,primary key(`sk_faits`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "faits" + "` WHERE `sk_faits` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "faits"
						+ "` (`sk_faits`,`id`,`id`,`sk_lieu`,`sk_restau`,`sk_temps`) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "faits"
						+ "` SET `id` = ?,`id` = ?,`sk_lieu` = ?,`sk_restau` = ?,`sk_temps` = ? WHERE `sk_faits` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:lIxAihXX9ITaf/02CeK8EThfdR9q4km2Tb6SsA==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "ods_projet_pizza" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `pizza`.`id`, \n  `pizza`.`address`, \n  `pizza`.`categories`, \n  `pizza`.`city`, \n  `pizza`.`country`, \n  `piz"
						+ "za`.`keys`, \n  `pizza`.`latitude`, \n  `pizza`.`longitude`, \n  `pizza`.`menuPageURL`, \n  `pizza`.`menus_amountMax`, \n  `p"
						+ "izza`.`menus_amountMin`, \n  `pizza`.`menus_currency`, \n  `pizza`.`menus_dateSeen`, \n  `pizza`.`menus_description`, \n  `p"
						+ "izza`.`menus_name`, \n  `pizza`.`name`, \n  `pizza`.`postalCode`, \n  `pizza`.`priceRangeCurrency`, \n  `pizza`.`priceRangeM"
						+ "in`, \n  `pizza`.`priceRangeMax`, \n  `pizza`.`province`, \n  `pizza`.`Column21`, \n  `pizza`.`Column22`, \n  `pizza`.`Column"
						+ "23`, \n  `pizza`.`Column24`, \n  `pizza`.`Column25`, \n  `pizza`.`Column26`, \n  `pizza`.`Column27`, \n  `pizza`.`Column28`, "
						+ "\n  `pizza`.`Column29`, \n  `pizza`.`Column30`\nFROM `pizza`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = null;
						} else {

							row1.id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.address = null;
						} else {

							row1.address = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.categories = null;
						} else {

							row1.categories = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.city = null;
						} else {

							row1.city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.country = null;
						} else {

							row1.country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.keys = null;
						} else {

							row1.keys = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.latitude = null;
						} else {

							row1.latitude = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.longitude = null;
						} else {

							row1.longitude = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.menuPageURL = null;
						} else {

							row1.menuPageURL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.menus_amountMax = null;
						} else {

							row1.menus_amountMax = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.menus_amountMin = null;
						} else {

							row1.menus_amountMin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.menus_currency = null;
						} else {

							row1.menus_currency = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.menus_dateSeen = null;
						} else {

							row1.menus_dateSeen = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.menus_description = null;
						} else {

							row1.menus_description = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.menus_name = null;
						} else {

							row1.menus_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.name = null;
						} else {

							row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.postalCode = null;
						} else {

							row1.postalCode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.priceRangeCurrency = null;
						} else {

							row1.priceRangeCurrency = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.priceRangeMin = null;
						} else {

							row1.priceRangeMin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.priceRangeMax = null;
						} else {

							row1.priceRangeMax = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.province = null;
						} else {

							row1.province = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.Column21 = null;
						} else {

							row1.Column21 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.Column22 = null;
						} else {

							row1.Column22 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Column23 = null;
						} else {

							row1.Column23 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.Column24 = null;
						} else {

							row1.Column24 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.Column25 = null;
						} else {

							row1.Column25 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.Column26 = null;
						} else {

							row1.Column26 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.Column27 = null;
						} else {

							row1.Column27 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.Column28 = null;
						} else {

							row1.Column28 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.Column29 = null;
						} else {

							row1.Column29 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.Column30 = null;
						} else {

							row1.Column30 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.id = row1.id;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.id = '" + row2HashKey.id +
							// "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row3"
						///////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.address = row1.address;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
							// and it contains more one result from keys : row3.address = '" +
							// row3HashKey.address + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.id = row2.id;

							row4HashKey.address = row1.address;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.id = '" + row4HashKey.id +
							// "', row4.address = '" + row4HashKey.address + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.dateAdded = row2.dateAdded == null ? null
									: new java.util.Date(row2.dateAdded.getTime());

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.dateAdded = '" +
							// row5HashKey.dateAdded + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

// # Output table : 'out1'
							out1_tmp.sk_faits = Numeric.sequence("s1", 1, 1);
							out1_tmp.id = row1.id;
							out1_tmp.id_1 = row2.id;
							out1_tmp.sk_lieu = row3.sk_lieu;
							out1_tmp.sk_restau = row4.sk_restau;
							out1_tmp.sk_temps = row5.sk_temps;
							out1 = out1_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
							}

							whetherReject_tDBOutput_1 = false;
							pstmt_tDBOutput_1.setInt(1, out1.sk_faits);

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (out1.id == null) {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(1, out1.id);
								}

								if (out1.id_1 == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, out1.id_1);
								}

								pstmtUpdate_tDBOutput_1.setInt(3, out1.sk_lieu);

								pstmtUpdate_tDBOutput_1.setInt(4, out1.sk_restau);

								pstmtUpdate_tDBOutput_1.setInt(5, out1.sk_temps);

								pstmtUpdate_tDBOutput_1.setInt(6 + count_tDBOutput_1, out1.sk_faits);

								try {
									updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
											+ pstmtUpdate_tDBOutput_1.executeUpdate();
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									System.err.print(e.getMessage());
								}
							} else {
								pstmtInsert_tDBOutput_1.setInt(1, out1.sk_faits);

								if (out1.id == null) {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(2, out1.id);
								}

								if (out1.id_1 == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, out1.id_1);
								}

								pstmtInsert_tDBOutput_1.setInt(4, out1.sk_lieu);

								pstmtInsert_tDBOutput_1.setInt(5, out1.sk_restau);

								pstmtInsert_tDBOutput_1.setInt(6, out1.sk_temps);

								try {
									insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
											+ pstmtInsert_tDBOutput_1.executeUpdate();
									nb_line_tDBOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									System.err.print(e.getMessage());
								}
							}
							commitCounter_tDBOutput_1++;

							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

								conn_tDBOutput_1.commit();
								commitCounter_tDBOutput_1 = 0;

							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String dateAdded;

		public String getDateAdded() {
			return this.dateAdded;
		}

		public String dateUpdated;

		public String getDateUpdated() {
			return this.dateUpdated;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String categories;

		public String getCategories() {
			return this.categories;
		}

		public String primaryCategories;

		public String getPrimaryCategories() {
			return this.primaryCategories;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String keys;

		public String getKeys() {
			return this.keys;
		}

		public String latitude;

		public String getLatitude() {
			return this.latitude;
		}

		public String longitude;

		public String getLongitude() {
			return this.longitude;
		}

		public String menuPageURL;

		public String getMenuPageURL() {
			return this.menuPageURL;
		}

		public String menus_amountMax;

		public String getMenus_amountMax() {
			return this.menus_amountMax;
		}

		public String menus_amountMin;

		public String getMenus_amountMin() {
			return this.menus_amountMin;
		}

		public String menus_currency;

		public String getMenus_currency() {
			return this.menus_currency;
		}

		public String menus_dateSeen;

		public String getMenus_dateSeen() {
			return this.menus_dateSeen;
		}

		public String menus_description;

		public String getMenus_description() {
			return this.menus_description;
		}

		public String menus_name;

		public String getMenus_name() {
			return this.menus_name;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String priceRangeCurrency;

		public String getPriceRangeCurrency() {
			return this.priceRangeCurrency;
		}

		public String priceRangeMin;

		public String getPriceRangeMin() {
			return this.priceRangeMin;
		}

		public String priceRangeMax;

		public String getPriceRangeMax() {
			return this.priceRangeMax;
		}

		public String province;

		public String getProvince() {
			return this.province;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		public String Column31;

		public String getColumn31() {
			return this.Column31;
		}

		public String Column32;

		public String getColumn32() {
			return this.Column32;
		}

		public String Column33;

		public String getColumn33() {
			return this.Column33;
		}

		public String Column34;

		public String getColumn34() {
			return this.Column34;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.dateAdded = this.dateAdded;
			other.dateUpdated = this.dateUpdated;
			other.address = this.address;
			other.categories = this.categories;
			other.primaryCategories = this.primaryCategories;
			other.city = this.city;
			other.country = this.country;
			other.keys = this.keys;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.menuPageURL = this.menuPageURL;
			other.menus_amountMax = this.menus_amountMax;
			other.menus_amountMin = this.menus_amountMin;
			other.menus_currency = this.menus_currency;
			other.menus_dateSeen = this.menus_dateSeen;
			other.menus_description = this.menus_description;
			other.menus_name = this.menus_name;
			other.name = this.name;
			other.postalCode = this.postalCode;
			other.priceRangeCurrency = this.priceRangeCurrency;
			other.priceRangeMin = this.priceRangeMin;
			other.priceRangeMax = this.priceRangeMax;
			other.province = this.province;
			other.Column24 = this.Column24;
			other.Column25 = this.Column25;
			other.Column26 = this.Column26;
			other.Column27 = this.Column27;
			other.Column28 = this.Column28;
			other.Column29 = this.Column29;
			other.Column30 = this.Column30;
			other.Column31 = this.Column31;
			other.Column32 = this.Column32;
			other.Column33 = this.Column33;
			other.Column34 = this.Column34;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.dateAdded = readString(dis, ois);

				this.dateUpdated = readString(dis, ois);

				this.address = readString(dis, ois);

				this.categories = readString(dis, ois);

				this.primaryCategories = readString(dis, ois);

				this.city = readString(dis, ois);

				this.country = readString(dis, ois);

				this.keys = readString(dis, ois);

				this.latitude = readString(dis, ois);

				this.longitude = readString(dis, ois);

				this.menuPageURL = readString(dis, ois);

				this.menus_amountMax = readString(dis, ois);

				this.menus_amountMin = readString(dis, ois);

				this.menus_currency = readString(dis, ois);

				this.menus_dateSeen = readString(dis, ois);

				this.menus_description = readString(dis, ois);

				this.menus_name = readString(dis, ois);

				this.name = readString(dis, ois);

				this.postalCode = readString(dis, ois);

				this.priceRangeCurrency = readString(dis, ois);

				this.priceRangeMin = readString(dis, ois);

				this.priceRangeMax = readString(dis, ois);

				this.province = readString(dis, ois);

				this.Column24 = readString(dis, ois);

				this.Column25 = readString(dis, ois);

				this.Column26 = readString(dis, ois);

				this.Column27 = readString(dis, ois);

				this.Column28 = readString(dis, ois);

				this.Column29 = readString(dis, ois);

				this.Column30 = readString(dis, ois);

				this.Column31 = readString(dis, ois);

				this.Column32 = readString(dis, ois);

				this.Column33 = readString(dis, ois);

				this.Column34 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.dateAdded, dos, oos);

				writeString(this.dateUpdated, dos, oos);

				writeString(this.address, dos, oos);

				writeString(this.categories, dos, oos);

				writeString(this.primaryCategories, dos, oos);

				writeString(this.city, dos, oos);

				writeString(this.country, dos, oos);

				writeString(this.keys, dos, oos);

				writeString(this.latitude, dos, oos);

				writeString(this.longitude, dos, oos);

				writeString(this.menuPageURL, dos, oos);

				writeString(this.menus_amountMax, dos, oos);

				writeString(this.menus_amountMin, dos, oos);

				writeString(this.menus_currency, dos, oos);

				writeString(this.menus_dateSeen, dos, oos);

				writeString(this.menus_description, dos, oos);

				writeString(this.menus_name, dos, oos);

				writeString(this.name, dos, oos);

				writeString(this.postalCode, dos, oos);

				writeString(this.priceRangeCurrency, dos, oos);

				writeString(this.priceRangeMin, dos, oos);

				writeString(this.priceRangeMax, dos, oos);

				writeString(this.province, dos, oos);

				writeString(this.Column24, dos, oos);

				writeString(this.Column25, dos, oos);

				writeString(this.Column26, dos, oos);

				writeString(this.Column27, dos, oos);

				writeString(this.Column28, dos, oos);

				writeString(this.Column29, dos, oos);

				writeString(this.Column30, dos, oos);

				writeString(this.Column31, dos, oos);

				writeString(this.Column32, dos, oos);

				writeString(this.Column33, dos, oos);

				writeString(this.Column34, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",dateAdded=" + dateAdded);
			sb.append(",dateUpdated=" + dateUpdated);
			sb.append(",address=" + address);
			sb.append(",categories=" + categories);
			sb.append(",primaryCategories=" + primaryCategories);
			sb.append(",city=" + city);
			sb.append(",country=" + country);
			sb.append(",keys=" + keys);
			sb.append(",latitude=" + latitude);
			sb.append(",longitude=" + longitude);
			sb.append(",menuPageURL=" + menuPageURL);
			sb.append(",menus_amountMax=" + menus_amountMax);
			sb.append(",menus_amountMin=" + menus_amountMin);
			sb.append(",menus_currency=" + menus_currency);
			sb.append(",menus_dateSeen=" + menus_dateSeen);
			sb.append(",menus_description=" + menus_description);
			sb.append(",menus_name=" + menus_name);
			sb.append(",name=" + name);
			sb.append(",postalCode=" + postalCode);
			sb.append(",priceRangeCurrency=" + priceRangeCurrency);
			sb.append(",priceRangeMin=" + priceRangeMin);
			sb.append(",priceRangeMax=" + priceRangeMax);
			sb.append(",province=" + province);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append(",Column31=" + Column31);
			sb.append(",Column32=" + Column32);
			sb.append(",Column33=" + Column33);
			sb.append(",Column34=" + Column34);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:13kcmC9zgSg518+2oroARruccRZ9w4FHQXkixg==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "ods_projet_pizza" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `resto`.`id`, \n  `resto`.`dateAdded`, \n  `resto`.`dateUpdated`, \n  `resto`.`address`, \n  `resto`.`categories`"
						+ ", \n  `resto`.`primaryCategories`, \n  `resto`.`city`, \n  `resto`.`country`, \n  `resto`.`keys`, \n  `resto`.`latitude`, \n  "
						+ "`resto`.`longitude`, \n  `resto`.`menuPageURL`, \n  `resto`.`menus_amountMax`, \n  `resto`.`menus_amountMin`, \n  `resto`.`m"
						+ "enus_currency`, \n  `resto`.`menus_dateSeen`, \n  `resto`.`menus_description`, \n  `resto`.`menus_name`, \n  `resto`.`name`,"
						+ " \n  `resto`.`postalCode`, \n  `resto`.`priceRangeCurrency`, \n  `resto`.`priceRangeMin`, \n  `resto`.`priceRangeMax`, \n  `r"
						+ "esto`.`province`, \n  `resto`.`Column24`, \n  `resto`.`Column25`, \n  `resto`.`Column26`, \n  `resto`.`Column27`, \n  `resto`"
						+ ".`Column28`, \n  `resto`.`Column29`, \n  `resto`.`Column30`, \n  `resto`.`Column31`, \n  `resto`.`Column32`, \n  `resto`.`Col"
						+ "umn33`, \n  `resto`.`Column34`\nFROM `resto`";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.id = null;
						} else {

							row2.id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.dateAdded = null;
						} else {

							row2.dateAdded = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.dateUpdated = null;
						} else {

							row2.dateUpdated = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.address = null;
						} else {

							row2.address = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.categories = null;
						} else {

							row2.categories = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.primaryCategories = null;
						} else {

							row2.primaryCategories = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.city = null;
						} else {

							row2.city = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.country = null;
						} else {

							row2.country = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.keys = null;
						} else {

							row2.keys = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.latitude = null;
						} else {

							row2.latitude = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.longitude = null;
						} else {

							row2.longitude = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.menuPageURL = null;
						} else {

							row2.menuPageURL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.menus_amountMax = null;
						} else {

							row2.menus_amountMax = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.menus_amountMin = null;
						} else {

							row2.menus_amountMin = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.menus_currency = null;
						} else {

							row2.menus_currency = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.menus_dateSeen = null;
						} else {

							row2.menus_dateSeen = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.menus_description = null;
						} else {

							row2.menus_description = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.menus_name = null;
						} else {

							row2.menus_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.name = null;
						} else {

							row2.name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.postalCode = null;
						} else {

							row2.postalCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.priceRangeCurrency = null;
						} else {

							row2.priceRangeCurrency = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.priceRangeMin = null;
						} else {

							row2.priceRangeMin = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.priceRangeMax = null;
						} else {

							row2.priceRangeMax = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.province = null;
						} else {

							row2.province = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.Column24 = null;
						} else {

							row2.Column24 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.Column25 = null;
						} else {

							row2.Column25 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.Column26 = null;
						} else {

							row2.Column26 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row2.Column27 = null;
						} else {

							row2.Column27 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, false);
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row2.Column28 = null;
						} else {

							row2.Column28 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row2.Column29 = null;
						} else {

							row2.Column29 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, false);
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row2.Column30 = null;
						} else {

							row2.Column30 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 31, false);
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row2.Column31 = null;
						} else {

							row2.Column31 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row2.Column32 = null;
						} else {

							row2.Column32 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, false);
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row2.Column33 = null;
						} else {

							row2.Column33 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 34, false);
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row2.Column34 = null;
						} else {

							row2.Column34 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 35, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.dateAdded = row2.dateAdded;

						row2_HashRow.dateUpdated = row2.dateUpdated;

						row2_HashRow.address = row2.address;

						row2_HashRow.categories = row2.categories;

						row2_HashRow.primaryCategories = row2.primaryCategories;

						row2_HashRow.city = row2.city;

						row2_HashRow.country = row2.country;

						row2_HashRow.keys = row2.keys;

						row2_HashRow.latitude = row2.latitude;

						row2_HashRow.longitude = row2.longitude;

						row2_HashRow.menuPageURL = row2.menuPageURL;

						row2_HashRow.menus_amountMax = row2.menus_amountMax;

						row2_HashRow.menus_amountMin = row2.menus_amountMin;

						row2_HashRow.menus_currency = row2.menus_currency;

						row2_HashRow.menus_dateSeen = row2.menus_dateSeen;

						row2_HashRow.menus_description = row2.menus_description;

						row2_HashRow.menus_name = row2.menus_name;

						row2_HashRow.name = row2.name;

						row2_HashRow.postalCode = row2.postalCode;

						row2_HashRow.priceRangeCurrency = row2.priceRangeCurrency;

						row2_HashRow.priceRangeMin = row2.priceRangeMin;

						row2_HashRow.priceRangeMax = row2.priceRangeMax;

						row2_HashRow.province = row2.province;

						row2_HashRow.Column24 = row2.Column24;

						row2_HashRow.Column25 = row2.Column25;

						row2_HashRow.Column26 = row2.Column26;

						row2_HashRow.Column27 = row2.Column27;

						row2_HashRow.Column28 = row2.Column28;

						row2_HashRow.Column29 = row2.Column29;

						row2_HashRow.Column30 = row2.Column30;

						row2_HashRow.Column31 = row2.Column31;

						row2_HashRow.Column32 = row2.Column32;

						row2_HashRow.Column33 = row2.Column33;

						row2_HashRow.Column34 = row2.Column34;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int sk_lieu;

		public int getSk_lieu() {
			return this.sk_lieu;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.address == null) ? 0 : this.address.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.address == null) {
				if (other.address != null)
					return false;

			} else if (!this.address.equals(other.address))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.sk_lieu = this.sk_lieu;
			other.address = this.address;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.address = this.address;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.address = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.address, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.sk_lieu = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.sk_lieu);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_lieu=" + String.valueOf(sk_lieu));
			sb.append(",address=" + address);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.address, other.address);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:xLaZ33GhSvoswhncWPVDdLbPbVejqG04blgvaQ==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "dw_projet_pizza" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `dim_lieu`.`sk_lieu`, \n  `dim_lieu`.`address`\nFROM `dim_lieu`";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.sk_lieu = 0;
						} else {

							row3.sk_lieu = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.address = null;
						} else {

							row3.address = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.sk_lieu = row3.sk_lieu;

						row3_HashRow.address = row3.address;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int sk_restau;

		public int getSk_restau() {
			return this.sk_restau;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				result = prime * result + ((this.address == null) ? 0 : this.address.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			if (this.address == null) {
				if (other.address != null)
					return false;

			} else if (!this.address.equals(other.address))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.sk_restau = this.sk_restau;
			other.id = this.id;
			other.address = this.address;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;
			other.address = this.address;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_SIAD_PIZZA_faits.length) {
					if (length < 1024 && commonByteArray_PROJET_SIAD_PIZZA_faits.length == 0) {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[1024];
					} else {
						commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length);
				strReturn = new String(commonByteArray_PROJET_SIAD_PIZZA_faits, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.address = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.address, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.sk_restau = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.sk_restau);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_restau=" + String.valueOf(sk_restau));
			sb.append(",id=" + id);
			sb.append(",address=" + address);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.address, other.address);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:gMof8xDCNVvAYhOM5rOQ3pXCICAzGVIK6xEfrQ==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "dw_projet_pizza" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `dim_restau`.`sk_restau`, \n  `dim_restau`.`id`, \n  `dim_restau`.`address`\nFROM `dim_restau`";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.sk_restau = 0;
						} else {

							row4.sk_restau = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.id = null;
						} else {

							row4.id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.address = null;
						} else {

							row4.address = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.sk_restau = row4.sk_restau;

						row4_HashRow.id = row4.id;

						row4_HashRow.address = row4.address;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJET_SIAD_PIZZA_faits = new byte[0];
		static byte[] commonByteArray_PROJET_SIAD_PIZZA_faits = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int sk_temps;

		public int getSk_temps() {
			return this.sk_temps;
		}

		public java.util.Date dateAdded;

		public java.util.Date getDateAdded() {
			return this.dateAdded;
		}

		public String annee;

		public String getAnnee() {
			return this.annee;
		}

		public String mois;

		public String getMois() {
			return this.mois;
		}

		public String jours;

		public String getJours() {
			return this.jours;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.dateAdded == null) ? 0 : this.dateAdded.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.dateAdded == null) {
				if (other.dateAdded != null)
					return false;

			} else if (!this.dateAdded.equals(other.dateAdded))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.sk_temps = this.sk_temps;
			other.dateAdded = this.dateAdded;
			other.annee = this.annee;
			other.mois = this.mois;
			other.jours = this.jours;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.dateAdded = this.dateAdded;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_SIAD_PIZZA_faits) {

				try {

					int length = 0;

					this.dateAdded = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.dateAdded, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.sk_temps = dis.readInt();

				this.annee = readString(dis, ois);

				this.mois = readString(dis, ois);

				this.jours = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.sk_temps);

				writeString(this.annee, dos, oos);

				writeString(this.mois, dos, oos);

				writeString(this.jours, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sk_temps=" + String.valueOf(sk_temps));
			sb.append(",dateAdded=" + String.valueOf(dateAdded));
			sb.append(",annee=" + annee);
			sb.append(",mois=" + mois);
			sb.append(",jours=" + jours);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dateAdded, other.dateAdded);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
				calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:9LjA0jj0Tldgnp7QgAnMonfbatHHFLVFOlepDA==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "dw_projet_pizza" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  `dim_temps`.`sk_temps`, \n  `dim_temps`.`dateAdded`, \n  `dim_temps`.`annee`, \n  `dim_temps`.`mois`, \n  `dim_te"
						+ "mps`.`jours`\nFROM `dim_temps`";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.sk_temps = 0;
						} else {

							row5.sk_temps = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.dateAdded = null;
						} else {

							if (rs_tDBInput_5.getString(2) != null) {
								String dateString_tDBInput_5 = rs_tDBInput_5.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_5)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
									row5.dateAdded = rs_tDBInput_5.getTimestamp(2);
								} else {
									row5.dateAdded = (java.util.Date) year0_tDBInput_5.clone();
								}
							} else {
								row5.dateAdded = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.annee = null;
						} else {

							row5.annee = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.mois = null;
						} else {

							row5.mois = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.jours = null;
						} else {

							row5.jours = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.sk_temps = row5.sk_temps;

						row5_HashRow.dateAdded = row5.dateAdded;

						row5_HashRow.annee = row5.annee;

						row5_HashRow.mois = row5.mois;

						row5_HashRow.jours = row5.jours;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final faits faitsClass = new faits();

		int exitCode = faitsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = faits.class.getClassLoader()
					.getResourceAsStream("projet_siad_pizza/faits_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = faits.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : faits");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 175890 characters generated by Talend Open Studio for Data Integration on the
 * January 2, 2022 10:50:29 PM WAT
 ************************************************************************************************/